# Common environment variables for backend services
x-backend-env: &backend-env
  CLICKHOUSE_HOST: clickhouse
  CVAT_POSTGRES_HOST: cvat_db
  CVAT_REDIS_INMEM_HOST: cvat_redis_inmem
  CVAT_REDIS_INMEM_PORT: 6379
  CVAT_REDIS_ONDISK_HOST: cvat_redis_ondisk
  CVAT_REDIS_ONDISK_PORT: 6666
  DJANGO_LOG_SERVER_HOST: vector
  DJANGO_LOG_SERVER_PORT: 80
  no_proxy: clickhouse,grafana,vector,nuclio,opa,${no_proxy:-}
  SMOKESCREEN_OPTS: ${SMOKESCREEN_OPTS:-}

# Common dependencies for backend services
x-backend-deps: &backend-deps
  cvat_redis_inmem:
    condition: service_started
  cvat_redis_ondisk:
    condition: service_started
  cvat_db:
    condition: service_started

services:
  # Nginx reverse proxy
  nginx:
    image: nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - ctai_app
      - cvat_ui
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - public

  ################
  ##### CTAI #####
  ################

  # CTAI main application
  ctai_app:
    build:
      context: ../ctai
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=${NODE_ENV}
        - CTAI_PORT=${CTAI_PORT}
    volumes:
      - ../ctai/prisma:/usr/src/app/prisma
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/usr/src/app/ctai_dataset
      - ${TRAINING_MOUNT_PATH}:/usr/src/app/train_process
      - ${RAG_PATH}:/usr/src/app/RAG_storage
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL_INTERNAL=${NEXTAUTH_URL_INTERNAL}
      - CVAT_URL=${CVAT_URL}
      - NODE_ENV=${NODE_ENV}
      - NPM_START_ENV=${NPM_START_ENV}
      - CTAI_PORT=${CTAI_PORT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - MODEL_PROVIDER=${MODEL_PROVIDER}
      - MODEL=${MODEL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - EMBEDDING_DIM=${EMBEDDING_DIM}
    depends_on:
      cvat_ui:
        condition: service_started
      ctai_mariadb:
        condition: service_healthy
    networks:
      - ctai
      - public

  # CTAI MariaDB database
  ctai_mariadb:
    image: mariadb:10.11.7
    hostname: ${DB_HOST}
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ../ctai/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ${DB_VOLUME_PATH}:/var/lib/mysql
    healthcheck:
      test: "mysql -hlocalhost -u$DB_USER -p$DB_PASSWORD ${DB_NAME} -e 'select 1'"
      interval: 1s
      timeout: 3s
      retries: 10
    platform: linux/amd64
    networks:
      - ctai

  # phpMyAdmin for CTAI database management
  ctai_pma:
    image: phpmyadmin/phpmyadmin:5.2.1
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: ${DB_PORT}
    depends_on:
      - ctai_mariadb
    platform: linux/amd64
    networks:
      - ctai

  ################
  ##### CVAT #####
  ################

  # pgAdmin for CVAT database management
  cvat_pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      cvat_db:
        condition: service_started
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    volumes:
      - cvat_pgadmin_data:/var/lib/pgadmin
    networks:
      - cvat

  # CVAT main server
  cvat_server:
    container_name: cvat_server
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on:
      <<: *backend-deps
      cvat_opa:
        condition: service_started
    environment:
      <<: *backend-env
      DJANGO_MODWSGI_EXTRA_ARGS: ""
      ALLOWED_HOSTS: "*"
      ADAPTIVE_AUTO_ANNOTATION: "false"
      IAM_OPA_BUNDLE: "1"
      NUMPROCS: 2
      CVAT_ANALYTICS: 1
      CVAT_BASE_URL:
      ONE_RUNNING_JOB_IN_QUEUE_PER_USER:
      CVAT_ADMIN_USER: ${CVAT_ADMIN_USER}
      CVAT_ADMIN_EMAIL: ${CVAT_ADMIN_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${CVAT_ADMIN_PASS}
    command: init run server createSuperuser
    labels:
      - traefik.enable=true
      - traefik.http.services.cvat.loadbalancer.server.port=8080
      - traefik.http.routers.cvat.rule=Host(`${CVAT_HOST:-localhost}`) &&
        PathPrefix(`/api/`, `/static/`, `/admin`, `/documentation/`, `/django-rq`)
      - traefik.http.routers.cvat.entrypoints=web
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      cvat:
        aliases:
          - cvat-server

  # CVAT UI
  cvat_ui:
    restart: always
    build:
      context: ../cvat
      dockerfile: Dockerfile.ui
    depends_on:
      - cvat_server
    labels:
      - traefik.enable=true
      - traefik.http.services.cvat-ui.loadbalancer.server.port=80
      - traefik.http.routers.cvat-ui.rule=Host(`${CVAT_HOST:-localhost}`)
      - traefik.http.routers.cvat-ui.entrypoints=web
    networks:
      - cvat

  # Open Policy Agent for CVAT
  cvat_opa:
    image: openpolicyagent/opa:0.45.0-rootless
    restart: always
    networks:
      cvat:
        aliases:
          - opa
    command:
      - run
      - --server
      - --log-level=error
      - --set=services.cvat.url=http://cvat-server:8080
      - --set=bundles.cvat.service=cvat
      - --set=bundles.cvat.resource=/api/auth/rules
      - --set=bundles.cvat.polling.min_delay_seconds=5
      - --set=bundles.cvat.polling.max_delay_seconds=15

  # Traefik reverse proxy for CVAT
  cvat_traefik:
    image: traefik:v2.10
    restart: always
    environment:
      CVAT_HOST: ${CVAT_HOST:-localhost}
      DJANGO_LOG_VIEWER_HOST: grafana
      DJANGO_LOG_VIEWER_PORT: 3000
      TRAEFIK_ACCESSLOG_FORMAT: json
      # We ought to restrict which fields get logged, so as to avoid redundant information,
      # but it doesn't work when configuring with environment variables:
      # <https://github.com/traefik/traefik/issues/9755>.
      # And we want to use environment variables to allow individual settings to be
      # overridden by other Compose files.
      TRAEFIK_LOG_FORMAT: json
      TRAEFIK_ENTRYPOINTS_web_ADDRESS: :8080
      TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: "false"
      TRAEFIK_PROVIDERS_DOCKER_NETWORK: cvat
      TRAEFIK_PROVIDERS_FILE_DIRECTORY: /etc/traefik/rules
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=dashboard
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.rule=Host(`${CVAT_HOST:-localhost}`)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../cvat/components/analytics/grafana_conf.yml:/etc/traefik/rules/grafana_conf.yml:ro
    networks:
      - cvat
      - public
    logging:
      driver: "json-file"
      options:
        max-size: 100m
        max-file: "10"

  # CVAT PostgreSQL database
  cvat_db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - cvat_db:/var/lib/postgresql/data
    networks:
      - cvat

  # CVAT worker services
  cvat_worker_export:
    # container_name: cvat_worker_export
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 2
    command: run worker.export
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  cvat_worker_import:
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 2
    command: run worker.import
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  cvat_worker_quality_reports:
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 1
    command: run worker.quality_reports
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  cvat_worker_analytics_reports:
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 2
    command: run worker.analytics_reports
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  cvat_worker_annotation:
    # container_name: cvat_worker_annotation
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 1
    command: run worker.annotation
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  # Redis for CVAT in-memory storage
  cvat_redis_inmem:
    image: redis:7.2.3-alpine
    restart: always
    command: ["redis-server", "--save", "60", "100", "--appendonly", "yes"]
    volumes:
      - cvat_inmem_db:/data
    networks:
      - cvat

  # Redis for CVAT on-disk storage
  cvat_redis_ondisk:
    image: apache/kvrocks:2.7.0
    restart: always
    command: ["--dir", "/var/lib/kvrocks/data"]
    # The kvrocks image a) has a healthcheck command, and b) has a root process
    # that doesn't reap children, so it's susceptible to the problem described here:
    # <https://stackoverflow.com/a/77109064>. Kvrocks also uses a tiny timeout for
    # its healthcheck command (1s), which makes the problem more likely to manifest.
    # Use a separate init process as a workaround.
    init: true
    volumes:
      - cvat_cache_db:/var/lib/kvrocks/data
    networks:
      - cvat

  # CVAT utility service
  cvat_utils:
    # image: cvat/server:${CVAT_VERSION:-dev}
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      CVAT_REDIS_INMEM_PASSWORD: ""
      NUMPROCS: 1
    command: run utils
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  # CVAT webhooks worker
  cvat_worker_webhooks:
    build:
      context: ../cvat
      args:
        http_proxy:
        https_proxy:
        socks_proxy:
        CLAM_AV:
        CVAT_DEBUG_ENABLED:
        COVERAGE_PROCESS_START:
    restart: always
    depends_on: *backend-deps
    environment:
      <<: *backend-env
      NUMPROCS: 1
    command: run worker.webhooks
    volumes:
      - ${CVAT_STORE_CTAI_DATASET_PATH}:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - cvat

  cvat_clickhouse:
    image: clickhouse/clickhouse-server:23.11-alpine
    restart: always
    environment:
      - CLICKHOUSE_DB=cvat
      - CLICKHOUSE_USER=user
      - CLICKHOUSE_PASSWORD=user
    networks:
      cvat:
        aliases:
          - clickhouse
    volumes:
      - ../cvat/components/analytics/clickhouse/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
      - cvat_events_db:/var/lib/clickhouse/

  cvat_vector:
    image: timberio/vector:0.26.0-alpine
    restart: always
    depends_on:
      - cvat_clickhouse
    environment:
      - CLICKHOUSE_DB=cvat
      - CLICKHOUSE_USER=user
      - CLICKHOUSE_PASSWORD=user
      - CLICKHOUSE_HOST=clickhouse
    networks:
      cvat:
        aliases:
          - vector
    volumes:
      - ../cvat/components/analytics/vector/vector.toml:/etc/vector/vector.toml:ro

  cvat_grafana:
    image: grafana/grafana-oss:10.1.2
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-clickhouse-datasource
      - GF_SERVER_ROOT_URL=http://${CVAT_HOST:-localhost}/analytics
      - GF_INSTALL_PLUGINS=https://github.com/grafana/clickhouse-datasource/releases/download/v2.0.7/grafana-clickhouse-datasource-2.0.7.linux_amd64.zip;grafana-clickhouse-datasource
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/all_events.json
    volumes:
      - ../cvat/components/analytics/grafana/dashboards/:/var/lib/grafana/dashboards/:ro
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: 'ClickHouse'
            type: 'grafana-clickhouse-datasource'
            isDefault: true
            jsonData:
              defaultDatabase: cvat
              port: 9000
              server: clickhouse
              username: user
              tlsSkipVerify: false
            secureJsonData:
              password: user
            editable: true
        EOF
        mkdir -p /etc/grafana/provisioning/dashboards
        cat <<EOF > /etc/grafana/provisioning/dashboards/dashboard.yaml
        apiVersion: 1
        providers:
          - name: cvat-logs
            type: file
            updateIntervalSeconds: 30
            options:
              path:  /var/lib/grafana/dashboards
              foldersFromFilesStructure: true
        EOF
        exec /run.sh
    networks:
      cvat:
        aliases:
          - grafana

volumes:
  # cvat
  cvat_db:
  cvat_keys:
  cvat_logs:
  cvat_inmem_db:
  cvat_events_db:
  cvat_cache_db:
  cvat_pgadmin_data:

networks:
  public:
  cvat:
  ctai:
